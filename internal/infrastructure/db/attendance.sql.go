// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attendance.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO attendance (
    student_id,
    class_schedule_id,
    attendance_date,
    image_url,
    image_metadata,
    is_valid
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, student_id, class_schedule_id, attendance_date, image_url, image_metadata, is_valid, created_at, updated_at
`

type CreateAttendanceParams struct {
	StudentID       uuid.UUID       `json:"student_id"`
	ClassScheduleID uuid.UUID       `json:"class_schedule_id"`
	AttendanceDate  time.Time       `json:"attendance_date"`
	ImageUrl        string          `json:"image_url"`
	ImageMetadata   json.RawMessage `json:"image_metadata"`
	IsValid         bool            `json:"is_valid"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.queryRow(ctx, q.createAttendanceStmt, createAttendance,
		arg.StudentID,
		arg.ClassScheduleID,
		arg.AttendanceDate,
		arg.ImageUrl,
		arg.ImageMetadata,
		arg.IsValid,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ClassScheduleID,
		&i.AttendanceDate,
		&i.ImageUrl,
		&i.ImageMetadata,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttendanceByClassScheduleID = `-- name: GetAttendanceByClassScheduleID :many
SELECT id, student_id, class_schedule_id, attendance_date, image_url, image_metadata, is_valid, created_at, updated_at FROM attendance
WHERE class_schedule_id = $1
AND attendance_date = $2
`

type GetAttendanceByClassScheduleIDParams struct {
	ClassScheduleID uuid.UUID `json:"class_schedule_id"`
	AttendanceDate  time.Time `json:"attendance_date"`
}

func (q *Queries) GetAttendanceByClassScheduleID(ctx context.Context, arg GetAttendanceByClassScheduleIDParams) ([]Attendance, error) {
	rows, err := q.query(ctx, q.getAttendanceByClassScheduleIDStmt, getAttendanceByClassScheduleID, arg.ClassScheduleID, arg.AttendanceDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attendance{}
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.ClassScheduleID,
			&i.AttendanceDate,
			&i.ImageUrl,
			&i.ImageMetadata,
			&i.IsValid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttendanceByID = `-- name: GetAttendanceByID :one
SELECT id, student_id, class_schedule_id, attendance_date, image_url, image_metadata, is_valid, created_at, updated_at FROM attendance
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAttendanceByID(ctx context.Context, id uuid.UUID) (Attendance, error) {
	row := q.queryRow(ctx, q.getAttendanceByIDStmt, getAttendanceByID, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ClassScheduleID,
		&i.AttendanceDate,
		&i.ImageUrl,
		&i.ImageMetadata,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttendanceByStudentID = `-- name: GetAttendanceByStudentID :many
SELECT id, student_id, class_schedule_id, attendance_date, image_url, image_metadata, is_valid, created_at, updated_at FROM attendance
WHERE student_id = $1
AND attendance_date BETWEEN $2 AND $3
`

type GetAttendanceByStudentIDParams struct {
	StudentID        uuid.UUID `json:"student_id"`
	AttendanceDate   time.Time `json:"attendance_date"`
	AttendanceDate_2 time.Time `json:"attendance_date_2"`
}

func (q *Queries) GetAttendanceByStudentID(ctx context.Context, arg GetAttendanceByStudentIDParams) ([]Attendance, error) {
	rows, err := q.query(ctx, q.getAttendanceByStudentIDStmt, getAttendanceByStudentID, arg.StudentID, arg.AttendanceDate, arg.AttendanceDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attendance{}
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.ClassScheduleID,
			&i.AttendanceDate,
			&i.ImageUrl,
			&i.ImageMetadata,
			&i.IsValid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendance = `-- name: UpdateAttendance :one
UPDATE attendance
SET
    is_valid = COALESCE($2, is_valid),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, student_id, class_schedule_id, attendance_date, image_url, image_metadata, is_valid, created_at, updated_at
`

type UpdateAttendanceParams struct {
	ID      uuid.UUID `json:"id"`
	IsValid bool      `json:"is_valid"`
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) (Attendance, error) {
	row := q.queryRow(ctx, q.updateAttendanceStmt, updateAttendance, arg.ID, arg.IsValid)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ClassScheduleID,
		&i.AttendanceDate,
		&i.ImageUrl,
		&i.ImageMetadata,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
