// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attendance.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO attendance (
    student_id,
    class_schedule_id,
    status,
    date,
    user_latitude,
    user_longitude,
    distance_meters,
    max_distance_meters
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, student_id, class_schedule_id, status, date, created_at, updated_at, user_latitude, user_longitude, distance_meters, max_distance_meters
`

type CreateAttendanceParams struct {
	StudentID         uuid.UUID        `json:"student_id"`
	ClassScheduleID   uuid.UUID        `json:"class_schedule_id"`
	Status            AttendanceStatus `json:"status"`
	Date              time.Time        `json:"date"`
	UserLatitude      sql.NullString   `json:"user_latitude"`
	UserLongitude     sql.NullString   `json:"user_longitude"`
	DistanceMeters    sql.NullString   `json:"distance_meters"`
	MaxDistanceMeters sql.NullInt32    `json:"max_distance_meters"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.queryRow(ctx, q.createAttendanceStmt, createAttendance,
		arg.StudentID,
		arg.ClassScheduleID,
		arg.Status,
		arg.Date,
		arg.UserLatitude,
		arg.UserLongitude,
		arg.DistanceMeters,
		arg.MaxDistanceMeters,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ClassScheduleID,
		&i.Status,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserLatitude,
		&i.UserLongitude,
		&i.DistanceMeters,
		&i.MaxDistanceMeters,
	)
	return i, err
}

const getAttendanceByClassScheduleID = `-- name: GetAttendanceByClassScheduleID :many
SELECT id, student_id, class_schedule_id, status, date, created_at, updated_at, user_latitude, user_longitude, distance_meters, max_distance_meters FROM attendance
WHERE class_schedule_id = $1
AND date = $2
`

type GetAttendanceByClassScheduleIDParams struct {
	ClassScheduleID uuid.UUID `json:"class_schedule_id"`
	Date            time.Time `json:"date"`
}

func (q *Queries) GetAttendanceByClassScheduleID(ctx context.Context, arg GetAttendanceByClassScheduleIDParams) ([]Attendance, error) {
	rows, err := q.query(ctx, q.getAttendanceByClassScheduleIDStmt, getAttendanceByClassScheduleID, arg.ClassScheduleID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attendance{}
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.ClassScheduleID,
			&i.Status,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserLatitude,
			&i.UserLongitude,
			&i.DistanceMeters,
			&i.MaxDistanceMeters,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttendanceByID = `-- name: GetAttendanceByID :one
SELECT id, student_id, class_schedule_id, status, date, created_at, updated_at, user_latitude, user_longitude, distance_meters, max_distance_meters FROM attendance
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAttendanceByID(ctx context.Context, id uuid.UUID) (Attendance, error) {
	row := q.queryRow(ctx, q.getAttendanceByIDStmt, getAttendanceByID, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ClassScheduleID,
		&i.Status,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserLatitude,
		&i.UserLongitude,
		&i.DistanceMeters,
		&i.MaxDistanceMeters,
	)
	return i, err
}

const getAttendanceByStudentID = `-- name: GetAttendanceByStudentID :many
SELECT id, student_id, class_schedule_id, status, date, created_at, updated_at, user_latitude, user_longitude, distance_meters, max_distance_meters FROM attendance
WHERE student_id = $1
AND date BETWEEN $2 AND $3
`

type GetAttendanceByStudentIDParams struct {
	StudentID uuid.UUID `json:"student_id"`
	Date      time.Time `json:"date"`
	Date_2    time.Time `json:"date_2"`
}

func (q *Queries) GetAttendanceByStudentID(ctx context.Context, arg GetAttendanceByStudentIDParams) ([]Attendance, error) {
	rows, err := q.query(ctx, q.getAttendanceByStudentIDStmt, getAttendanceByStudentID, arg.StudentID, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attendance{}
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.ClassScheduleID,
			&i.Status,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserLatitude,
			&i.UserLongitude,
			&i.DistanceMeters,
			&i.MaxDistanceMeters,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendance = `-- name: UpdateAttendance :one
UPDATE attendance
SET
    status = COALESCE($2, status),
    user_latitude = COALESCE($3, user_latitude),
    user_longitude = COALESCE($4, user_longitude),
    distance_meters = COALESCE($5, distance_meters),
    max_distance_meters = COALESCE($6, max_distance_meters),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, student_id, class_schedule_id, status, date, created_at, updated_at, user_latitude, user_longitude, distance_meters, max_distance_meters
`

type UpdateAttendanceParams struct {
	ID                uuid.UUID        `json:"id"`
	Status            AttendanceStatus `json:"status"`
	UserLatitude      sql.NullString   `json:"user_latitude"`
	UserLongitude     sql.NullString   `json:"user_longitude"`
	DistanceMeters    sql.NullString   `json:"distance_meters"`
	MaxDistanceMeters sql.NullInt32    `json:"max_distance_meters"`
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) (Attendance, error) {
	row := q.queryRow(ctx, q.updateAttendanceStmt, updateAttendance,
		arg.ID,
		arg.Status,
		arg.UserLatitude,
		arg.UserLongitude,
		arg.DistanceMeters,
		arg.MaxDistanceMeters,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.ClassScheduleID,
		&i.Status,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserLatitude,
		&i.UserLongitude,
		&i.DistanceMeters,
		&i.MaxDistanceMeters,
	)
	return i, err
}
