// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: classrooms.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createClassroom = `-- name: CreateClassroom :one
INSERT INTO classrooms (
    name,
    building,
    floor,
    capacity,
    faculty_id,
    location_lat,
    location_lng
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id
`

type CreateClassroomParams struct {
	Name        string        `json:"name"`
	Building    string        `json:"building"`
	Floor       int32         `json:"floor"`
	Capacity    int32         `json:"capacity"`
	FacultyID   uuid.NullUUID `json:"faculty_id"`
	LocationLat string        `json:"location_lat"`
	LocationLng string        `json:"location_lng"`
}

func (q *Queries) CreateClassroom(ctx context.Context, arg CreateClassroomParams) (Classroom, error) {
	row := q.queryRow(ctx, q.createClassroomStmt, createClassroom,
		arg.Name,
		arg.Building,
		arg.Floor,
		arg.Capacity,
		arg.FacultyID,
		arg.LocationLat,
		arg.LocationLng,
	)
	var i Classroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Building,
		&i.Floor,
		&i.Capacity,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacultyID,
	)
	return i, err
}

const deleteClassroom = `-- name: DeleteClassroom :exec
DELETE FROM classrooms
WHERE id = $1
`

func (q *Queries) DeleteClassroom(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteClassroomStmt, deleteClassroom, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id FROM classrooms
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]Classroom, error) {
	rows, err := q.query(ctx, q.getAllStmt, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Classroom{}
	for rows.Next() {
		var i Classroom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Building,
			&i.Floor,
			&i.Capacity,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassroomByID = `-- name: GetClassroomByID :one
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id FROM classrooms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClassroomByID(ctx context.Context, id uuid.UUID) (Classroom, error) {
	row := q.queryRow(ctx, q.getClassroomByIDStmt, getClassroomByID, id)
	var i Classroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Building,
		&i.Floor,
		&i.Capacity,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacultyID,
	)
	return i, err
}

const getClassroomByName = `-- name: GetClassroomByName :one
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id FROM classrooms
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetClassroomByName(ctx context.Context, name string) (Classroom, error) {
	row := q.queryRow(ctx, q.getClassroomByNameStmt, getClassroomByName, name)
	var i Classroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Building,
		&i.Floor,
		&i.Capacity,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacultyID,
	)
	return i, err
}

const getClassroomsByBuilding = `-- name: GetClassroomsByBuilding :many
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id FROM classrooms
WHERE building = $1
`

func (q *Queries) GetClassroomsByBuilding(ctx context.Context, building string) ([]Classroom, error) {
	rows, err := q.query(ctx, q.getClassroomsByBuildingStmt, getClassroomsByBuilding, building)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Classroom{}
	for rows.Next() {
		var i Classroom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Building,
			&i.Floor,
			&i.Capacity,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassroomsByCapacity = `-- name: GetClassroomsByCapacity :many
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id FROM classrooms
WHERE capacity >= $1
`

func (q *Queries) GetClassroomsByCapacity(ctx context.Context, capacity int32) ([]Classroom, error) {
	rows, err := q.query(ctx, q.getClassroomsByCapacityStmt, getClassroomsByCapacity, capacity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Classroom{}
	for rows.Next() {
		var i Classroom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Building,
			&i.Floor,
			&i.Capacity,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassroomsByFacultyID = `-- name: GetClassroomsByFacultyID :many
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id FROM classrooms
WHERE faculty_id = $1
ORDER BY name
`

func (q *Queries) GetClassroomsByFacultyID(ctx context.Context, facultyID uuid.NullUUID) ([]Classroom, error) {
	rows, err := q.query(ctx, q.getClassroomsByFacultyIDStmt, getClassroomsByFacultyID, facultyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Classroom{}
	for rows.Next() {
		var i Classroom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Building,
			&i.Floor,
			&i.Capacity,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNearbyClassrooms = `-- name: GetNearbyClassrooms :many
SELECT id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id,
    earth_distance(ll_to_earth(location_lat, location_lng), ll_to_earth($1, $2)) as distance
FROM classrooms
WHERE earth_box(ll_to_earth($1, $2), $3) @> ll_to_earth(location_lat, location_lng)
    AND earth_distance(ll_to_earth(location_lat, location_lng), ll_to_earth($1, $2)) <= $3
ORDER BY distance
`

type GetNearbyClassroomsParams struct {
	LlToEarth   float64 `json:"ll_to_earth"`
	LlToEarth_2 float64 `json:"ll_to_earth_2"`
	EarthBox    float64 `json:"earth_box"`
}

type GetNearbyClassroomsRow struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	Building    string        `json:"building"`
	Floor       int32         `json:"floor"`
	Capacity    int32         `json:"capacity"`
	LocationLat string        `json:"location_lat"`
	LocationLng string        `json:"location_lng"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
	FacultyID   uuid.NullUUID `json:"faculty_id"`
	Distance    float64       `json:"distance"`
}

func (q *Queries) GetNearbyClassrooms(ctx context.Context, arg GetNearbyClassroomsParams) ([]GetNearbyClassroomsRow, error) {
	rows, err := q.query(ctx, q.getNearbyClassroomsStmt, getNearbyClassrooms, arg.LlToEarth, arg.LlToEarth_2, arg.EarthBox)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNearbyClassroomsRow{}
	for rows.Next() {
		var i GetNearbyClassroomsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Building,
			&i.Floor,
			&i.Capacity,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyID,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClassroom = `-- name: UpdateClassroom :one
UPDATE classrooms
SET
    name = COALESCE($2, name),
    building = COALESCE($3, building),
    floor = COALESCE($4, floor),
    capacity = COALESCE($5, capacity),
    faculty_id = COALESCE($6, faculty_id),
    location_lat = COALESCE($7, location_lat),
    location_lng = COALESCE($8, location_lng),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, building, floor, capacity, location_lat, location_lng, created_at, updated_at, faculty_id
`

type UpdateClassroomParams struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	Building    string        `json:"building"`
	Floor       int32         `json:"floor"`
	Capacity    int32         `json:"capacity"`
	FacultyID   uuid.NullUUID `json:"faculty_id"`
	LocationLat string        `json:"location_lat"`
	LocationLng string        `json:"location_lng"`
}

func (q *Queries) UpdateClassroom(ctx context.Context, arg UpdateClassroomParams) (Classroom, error) {
	row := q.queryRow(ctx, q.updateClassroomStmt, updateClassroom,
		arg.ID,
		arg.Name,
		arg.Building,
		arg.Floor,
		arg.Capacity,
		arg.FacultyID,
		arg.LocationLat,
		arg.LocationLng,
	)
	var i Classroom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Building,
		&i.Floor,
		&i.Capacity,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacultyID,
	)
	return i, err
}
