// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: courses.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    faculty_id,
    name,
    semester
) VALUES (
    $1, $2, $3
) RETURNING id, faculty_id, name, semester, created_at, updated_at
`

type CreateCourseParams struct {
	FacultyID uuid.UUID      `json:"faculty_id"`
	Name      string         `json:"name"`
	Semester  sql.NullString `json:"semester"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.queryRow(ctx, q.createCourseStmt, createCourse, arg.FacultyID, arg.Name, arg.Semester)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.FacultyID,
		&i.Name,
		&i.Semester,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses
WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCourseStmt, deleteCourse, id)
	return err
}

const getAllCourses = `-- name: GetAllCourses :many
SELECT id, faculty_id, name, semester, created_at, updated_at FROM courses
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.query(ctx, q.getAllCoursesStmt, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.FacultyID,
			&i.Name,
			&i.Semester,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT id, faculty_id, name, semester, created_at, updated_at FROM courses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourseByID(ctx context.Context, id uuid.UUID) (Course, error) {
	row := q.queryRow(ctx, q.getCourseByIDStmt, getCourseByID, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.FacultyID,
		&i.Name,
		&i.Semester,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoursesByFacultyID = `-- name: GetCoursesByFacultyID :many
SELECT id, faculty_id, name, semester, created_at, updated_at FROM courses
WHERE faculty_id = $1
`

func (q *Queries) GetCoursesByFacultyID(ctx context.Context, facultyID uuid.UUID) ([]Course, error) {
	rows, err := q.query(ctx, q.getCoursesByFacultyIDStmt, getCoursesByFacultyID, facultyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.FacultyID,
			&i.Name,
			&i.Semester,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoursesBySemester = `-- name: GetCoursesBySemester :many
SELECT id, faculty_id, name, semester, created_at, updated_at FROM courses
WHERE semester = $1
`

func (q *Queries) GetCoursesBySemester(ctx context.Context, semester sql.NullString) ([]Course, error) {
	rows, err := q.query(ctx, q.getCoursesBySemesterStmt, getCoursesBySemester, semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.FacultyID,
			&i.Name,
			&i.Semester,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE courses
SET
    name = COALESCE($2, name),
    semester = COALESCE($3, semester),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, faculty_id, name, semester, created_at, updated_at
`

type UpdateCourseParams struct {
	ID       uuid.UUID      `json:"id"`
	Name     string         `json:"name"`
	Semester sql.NullString `json:"semester"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.queryRow(ctx, q.updateCourseStmt, updateCourse, arg.ID, arg.Name, arg.Semester)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.FacultyID,
		&i.Name,
		&i.Semester,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
