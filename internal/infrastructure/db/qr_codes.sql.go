// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: qr_codes.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createQRCode = `-- name: CreateQRCode :one
INSERT INTO qr_codes (
    course_id,
    code,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, course_id, code, expires_at, created_at
`

type CreateQRCodeParams struct {
	CourseID  uuid.UUID `json:"course_id"`
	Code      string    `json:"code"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateQRCode(ctx context.Context, arg CreateQRCodeParams) (QrCode, error) {
	row := q.queryRow(ctx, q.createQRCodeStmt, createQRCode, arg.CourseID, arg.Code, arg.ExpiresAt)
	var i QrCode
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Code,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteQRCode = `-- name: DeleteQRCode :exec
DELETE FROM qr_codes
WHERE id = $1
`

func (q *Queries) DeleteQRCode(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteQRCodeStmt, deleteQRCode, id)
	return err
}

const getQRCodeByCode = `-- name: GetQRCodeByCode :one
SELECT id, course_id, code, expires_at, created_at FROM qr_codes
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetQRCodeByCode(ctx context.Context, code string) (QrCode, error) {
	row := q.queryRow(ctx, q.getQRCodeByCodeStmt, getQRCodeByCode, code)
	var i QrCode
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Code,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getQRCodesByCourseID = `-- name: GetQRCodesByCourseID :many
SELECT id, course_id, code, expires_at, created_at FROM qr_codes
WHERE course_id = $1
`

func (q *Queries) GetQRCodesByCourseID(ctx context.Context, courseID uuid.UUID) ([]QrCode, error) {
	rows, err := q.query(ctx, q.getQRCodesByCourseIDStmt, getQRCodesByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QrCode{}
	for rows.Next() {
		var i QrCode
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Code,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
