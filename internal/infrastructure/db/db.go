// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cleanExpiredTokensStmt, err = db.PrepareContext(ctx, cleanExpiredTokens); err != nil {
		return nil, fmt.Errorf("error preparing query CleanExpiredTokens: %w", err)
	}
	if q.createAttendanceStmt, err = db.PrepareContext(ctx, createAttendance); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAttendance: %w", err)
	}
	if q.createClassScheduleStmt, err = db.PrepareContext(ctx, createClassSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClassSchedule: %w", err)
	}
	if q.createClassroomStmt, err = db.PrepareContext(ctx, createClassroom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClassroom: %w", err)
	}
	if q.createCourseStmt, err = db.PrepareContext(ctx, createCourse); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCourse: %w", err)
	}
	if q.createCourseSectionStmt, err = db.PrepareContext(ctx, createCourseSection); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCourseSection: %w", err)
	}
	if q.createFacultyStmt, err = db.PrepareContext(ctx, createFaculty); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFaculty: %w", err)
	}
	if q.createQRCodeStmt, err = db.PrepareContext(ctx, createQRCode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateQRCode: %w", err)
	}
	if q.createRefreshTokenStmt, err = db.PrepareContext(ctx, createRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRefreshToken: %w", err)
	}
	if q.createUniversityStmt, err = db.PrepareContext(ctx, createUniversity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUniversity: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteClassScheduleStmt, err = db.PrepareContext(ctx, deleteClassSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClassSchedule: %w", err)
	}
	if q.deleteClassroomStmt, err = db.PrepareContext(ctx, deleteClassroom); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClassroom: %w", err)
	}
	if q.deleteCourseStmt, err = db.PrepareContext(ctx, deleteCourse); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCourse: %w", err)
	}
	if q.deleteCourseSectionStmt, err = db.PrepareContext(ctx, deleteCourseSection); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCourseSection: %w", err)
	}
	if q.deleteFacultyStmt, err = db.PrepareContext(ctx, deleteFaculty); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFaculty: %w", err)
	}
	if q.deleteQRCodeStmt, err = db.PrepareContext(ctx, deleteQRCode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQRCode: %w", err)
	}
	if q.deleteRefreshTokenStmt, err = db.PrepareContext(ctx, deleteRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRefreshToken: %w", err)
	}
	if q.deleteUniversityStmt, err = db.PrepareContext(ctx, deleteUniversity); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUniversity: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserRefreshTokensStmt, err = db.PrepareContext(ctx, deleteUserRefreshTokens); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserRefreshTokens: %w", err)
	}
	if q.getAllStmt, err = db.PrepareContext(ctx, getAll); err != nil {
		return nil, fmt.Errorf("error preparing query GetAll: %w", err)
	}
	if q.getAttendanceByClassScheduleIDStmt, err = db.PrepareContext(ctx, getAttendanceByClassScheduleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAttendanceByClassScheduleID: %w", err)
	}
	if q.getAttendanceByIDStmt, err = db.PrepareContext(ctx, getAttendanceByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAttendanceByID: %w", err)
	}
	if q.getAttendanceByStudentIDStmt, err = db.PrepareContext(ctx, getAttendanceByStudentID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAttendanceByStudentID: %w", err)
	}
	if q.getClassScheduleByIDStmt, err = db.PrepareContext(ctx, getClassScheduleByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassScheduleByID: %w", err)
	}
	if q.getClassSchedulesByClassroomAndTimeStmt, err = db.PrepareContext(ctx, getClassSchedulesByClassroomAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassSchedulesByClassroomAndTime: %w", err)
	}
	if q.getClassSchedulesByCourseIDStmt, err = db.PrepareContext(ctx, getClassSchedulesByCourseID); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassSchedulesByCourseID: %w", err)
	}
	if q.getClassroomByIDStmt, err = db.PrepareContext(ctx, getClassroomByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassroomByID: %w", err)
	}
	if q.getClassroomByNameStmt, err = db.PrepareContext(ctx, getClassroomByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassroomByName: %w", err)
	}
	if q.getClassroomsByBuildingStmt, err = db.PrepareContext(ctx, getClassroomsByBuilding); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassroomsByBuilding: %w", err)
	}
	if q.getClassroomsByCapacityStmt, err = db.PrepareContext(ctx, getClassroomsByCapacity); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassroomsByCapacity: %w", err)
	}
	if q.getCourseByIDStmt, err = db.PrepareContext(ctx, getCourseByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseByID: %w", err)
	}
	if q.getCourseSectionByIDStmt, err = db.PrepareContext(ctx, getCourseSectionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseSectionByID: %w", err)
	}
	if q.getCourseSectionsByCourseIDStmt, err = db.PrepareContext(ctx, getCourseSectionsByCourseID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseSectionsByCourseID: %w", err)
	}
	if q.getCourseSectionsByTeacherIDStmt, err = db.PrepareContext(ctx, getCourseSectionsByTeacherID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseSectionsByTeacherID: %w", err)
	}
	if q.getCoursesByFacultyIDStmt, err = db.PrepareContext(ctx, getCoursesByFacultyID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCoursesByFacultyID: %w", err)
	}
	if q.getFacultiesByUniversityIDStmt, err = db.PrepareContext(ctx, getFacultiesByUniversityID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFacultiesByUniversityID: %w", err)
	}
	if q.getFacultyByIDStmt, err = db.PrepareContext(ctx, getFacultyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFacultyByID: %w", err)
	}
	if q.getFacultyByNameStmt, err = db.PrepareContext(ctx, getFacultyByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFacultyByName: %w", err)
	}
	if q.getNearbyClassroomsStmt, err = db.PrepareContext(ctx, getNearbyClassrooms); err != nil {
		return nil, fmt.Errorf("error preparing query GetNearbyClassrooms: %w", err)
	}
	if q.getQRCodeByCodeStmt, err = db.PrepareContext(ctx, getQRCodeByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetQRCodeByCode: %w", err)
	}
	if q.getQRCodesByCourseIDStmt, err = db.PrepareContext(ctx, getQRCodesByCourseID); err != nil {
		return nil, fmt.Errorf("error preparing query GetQRCodesByCourseID: %w", err)
	}
	if q.getRefreshTokenStmt, err = db.PrepareContext(ctx, getRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetRefreshToken: %w", err)
	}
	if q.getUniversityByIDStmt, err = db.PrepareContext(ctx, getUniversityByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUniversityByID: %w", err)
	}
	if q.getUniversityByNameStmt, err = db.PrepareContext(ctx, getUniversityByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUniversityByName: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listFacultiesStmt, err = db.PrepareContext(ctx, listFaculties); err != nil {
		return nil, fmt.Errorf("error preparing query ListFaculties: %w", err)
	}
	if q.listUniversitiesStmt, err = db.PrepareContext(ctx, listUniversities); err != nil {
		return nil, fmt.Errorf("error preparing query ListUniversities: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateAttendanceStmt, err = db.PrepareContext(ctx, updateAttendance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAttendance: %w", err)
	}
	if q.updateClassScheduleStmt, err = db.PrepareContext(ctx, updateClassSchedule); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClassSchedule: %w", err)
	}
	if q.updateClassroomStmt, err = db.PrepareContext(ctx, updateClassroom); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClassroom: %w", err)
	}
	if q.updateCourseStmt, err = db.PrepareContext(ctx, updateCourse); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCourse: %w", err)
	}
	if q.updateCourseSectionStmt, err = db.PrepareContext(ctx, updateCourseSection); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCourseSection: %w", err)
	}
	if q.updateFacultyStmt, err = db.PrepareContext(ctx, updateFaculty); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFaculty: %w", err)
	}
	if q.updateUniversityStmt, err = db.PrepareContext(ctx, updateUniversity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUniversity: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cleanExpiredTokensStmt != nil {
		if cerr := q.cleanExpiredTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanExpiredTokensStmt: %w", cerr)
		}
	}
	if q.createAttendanceStmt != nil {
		if cerr := q.createAttendanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAttendanceStmt: %w", cerr)
		}
	}
	if q.createClassScheduleStmt != nil {
		if cerr := q.createClassScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClassScheduleStmt: %w", cerr)
		}
	}
	if q.createClassroomStmt != nil {
		if cerr := q.createClassroomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClassroomStmt: %w", cerr)
		}
	}
	if q.createCourseStmt != nil {
		if cerr := q.createCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCourseStmt: %w", cerr)
		}
	}
	if q.createCourseSectionStmt != nil {
		if cerr := q.createCourseSectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCourseSectionStmt: %w", cerr)
		}
	}
	if q.createFacultyStmt != nil {
		if cerr := q.createFacultyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFacultyStmt: %w", cerr)
		}
	}
	if q.createQRCodeStmt != nil {
		if cerr := q.createQRCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createQRCodeStmt: %w", cerr)
		}
	}
	if q.createRefreshTokenStmt != nil {
		if cerr := q.createRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRefreshTokenStmt: %w", cerr)
		}
	}
	if q.createUniversityStmt != nil {
		if cerr := q.createUniversityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUniversityStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteClassScheduleStmt != nil {
		if cerr := q.deleteClassScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClassScheduleStmt: %w", cerr)
		}
	}
	if q.deleteClassroomStmt != nil {
		if cerr := q.deleteClassroomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClassroomStmt: %w", cerr)
		}
	}
	if q.deleteCourseStmt != nil {
		if cerr := q.deleteCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCourseStmt: %w", cerr)
		}
	}
	if q.deleteCourseSectionStmt != nil {
		if cerr := q.deleteCourseSectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCourseSectionStmt: %w", cerr)
		}
	}
	if q.deleteFacultyStmt != nil {
		if cerr := q.deleteFacultyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFacultyStmt: %w", cerr)
		}
	}
	if q.deleteQRCodeStmt != nil {
		if cerr := q.deleteQRCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQRCodeStmt: %w", cerr)
		}
	}
	if q.deleteRefreshTokenStmt != nil {
		if cerr := q.deleteRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRefreshTokenStmt: %w", cerr)
		}
	}
	if q.deleteUniversityStmt != nil {
		if cerr := q.deleteUniversityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUniversityStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserRefreshTokensStmt != nil {
		if cerr := q.deleteUserRefreshTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserRefreshTokensStmt: %w", cerr)
		}
	}
	if q.getAllStmt != nil {
		if cerr := q.getAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllStmt: %w", cerr)
		}
	}
	if q.getAttendanceByClassScheduleIDStmt != nil {
		if cerr := q.getAttendanceByClassScheduleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAttendanceByClassScheduleIDStmt: %w", cerr)
		}
	}
	if q.getAttendanceByIDStmt != nil {
		if cerr := q.getAttendanceByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAttendanceByIDStmt: %w", cerr)
		}
	}
	if q.getAttendanceByStudentIDStmt != nil {
		if cerr := q.getAttendanceByStudentIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAttendanceByStudentIDStmt: %w", cerr)
		}
	}
	if q.getClassScheduleByIDStmt != nil {
		if cerr := q.getClassScheduleByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassScheduleByIDStmt: %w", cerr)
		}
	}
	if q.getClassSchedulesByClassroomAndTimeStmt != nil {
		if cerr := q.getClassSchedulesByClassroomAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassSchedulesByClassroomAndTimeStmt: %w", cerr)
		}
	}
	if q.getClassSchedulesByCourseIDStmt != nil {
		if cerr := q.getClassSchedulesByCourseIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassSchedulesByCourseIDStmt: %w", cerr)
		}
	}
	if q.getClassroomByIDStmt != nil {
		if cerr := q.getClassroomByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassroomByIDStmt: %w", cerr)
		}
	}
	if q.getClassroomByNameStmt != nil {
		if cerr := q.getClassroomByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassroomByNameStmt: %w", cerr)
		}
	}
	if q.getClassroomsByBuildingStmt != nil {
		if cerr := q.getClassroomsByBuildingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassroomsByBuildingStmt: %w", cerr)
		}
	}
	if q.getClassroomsByCapacityStmt != nil {
		if cerr := q.getClassroomsByCapacityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassroomsByCapacityStmt: %w", cerr)
		}
	}
	if q.getCourseByIDStmt != nil {
		if cerr := q.getCourseByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseByIDStmt: %w", cerr)
		}
	}
	if q.getCourseSectionByIDStmt != nil {
		if cerr := q.getCourseSectionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseSectionByIDStmt: %w", cerr)
		}
	}
	if q.getCourseSectionsByCourseIDStmt != nil {
		if cerr := q.getCourseSectionsByCourseIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseSectionsByCourseIDStmt: %w", cerr)
		}
	}
	if q.getCourseSectionsByTeacherIDStmt != nil {
		if cerr := q.getCourseSectionsByTeacherIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseSectionsByTeacherIDStmt: %w", cerr)
		}
	}
	if q.getCoursesByFacultyIDStmt != nil {
		if cerr := q.getCoursesByFacultyIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCoursesByFacultyIDStmt: %w", cerr)
		}
	}
	if q.getFacultiesByUniversityIDStmt != nil {
		if cerr := q.getFacultiesByUniversityIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFacultiesByUniversityIDStmt: %w", cerr)
		}
	}
	if q.getFacultyByIDStmt != nil {
		if cerr := q.getFacultyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFacultyByIDStmt: %w", cerr)
		}
	}
	if q.getFacultyByNameStmt != nil {
		if cerr := q.getFacultyByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFacultyByNameStmt: %w", cerr)
		}
	}
	if q.getNearbyClassroomsStmt != nil {
		if cerr := q.getNearbyClassroomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNearbyClassroomsStmt: %w", cerr)
		}
	}
	if q.getQRCodeByCodeStmt != nil {
		if cerr := q.getQRCodeByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQRCodeByCodeStmt: %w", cerr)
		}
	}
	if q.getQRCodesByCourseIDStmt != nil {
		if cerr := q.getQRCodesByCourseIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQRCodesByCourseIDStmt: %w", cerr)
		}
	}
	if q.getRefreshTokenStmt != nil {
		if cerr := q.getRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getUniversityByIDStmt != nil {
		if cerr := q.getUniversityByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUniversityByIDStmt: %w", cerr)
		}
	}
	if q.getUniversityByNameStmt != nil {
		if cerr := q.getUniversityByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUniversityByNameStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listFacultiesStmt != nil {
		if cerr := q.listFacultiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFacultiesStmt: %w", cerr)
		}
	}
	if q.listUniversitiesStmt != nil {
		if cerr := q.listUniversitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUniversitiesStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateAttendanceStmt != nil {
		if cerr := q.updateAttendanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAttendanceStmt: %w", cerr)
		}
	}
	if q.updateClassScheduleStmt != nil {
		if cerr := q.updateClassScheduleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClassScheduleStmt: %w", cerr)
		}
	}
	if q.updateClassroomStmt != nil {
		if cerr := q.updateClassroomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClassroomStmt: %w", cerr)
		}
	}
	if q.updateCourseStmt != nil {
		if cerr := q.updateCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCourseStmt: %w", cerr)
		}
	}
	if q.updateCourseSectionStmt != nil {
		if cerr := q.updateCourseSectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCourseSectionStmt: %w", cerr)
		}
	}
	if q.updateFacultyStmt != nil {
		if cerr := q.updateFacultyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFacultyStmt: %w", cerr)
		}
	}
	if q.updateUniversityStmt != nil {
		if cerr := q.updateUniversityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUniversityStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	cleanExpiredTokensStmt                  *sql.Stmt
	createAttendanceStmt                    *sql.Stmt
	createClassScheduleStmt                 *sql.Stmt
	createClassroomStmt                     *sql.Stmt
	createCourseStmt                        *sql.Stmt
	createCourseSectionStmt                 *sql.Stmt
	createFacultyStmt                       *sql.Stmt
	createQRCodeStmt                        *sql.Stmt
	createRefreshTokenStmt                  *sql.Stmt
	createUniversityStmt                    *sql.Stmt
	createUserStmt                          *sql.Stmt
	deleteClassScheduleStmt                 *sql.Stmt
	deleteClassroomStmt                     *sql.Stmt
	deleteCourseStmt                        *sql.Stmt
	deleteCourseSectionStmt                 *sql.Stmt
	deleteFacultyStmt                       *sql.Stmt
	deleteQRCodeStmt                        *sql.Stmt
	deleteRefreshTokenStmt                  *sql.Stmt
	deleteUniversityStmt                    *sql.Stmt
	deleteUserStmt                          *sql.Stmt
	deleteUserRefreshTokensStmt             *sql.Stmt
	getAllStmt                              *sql.Stmt
	getAttendanceByClassScheduleIDStmt      *sql.Stmt
	getAttendanceByIDStmt                   *sql.Stmt
	getAttendanceByStudentIDStmt            *sql.Stmt
	getClassScheduleByIDStmt                *sql.Stmt
	getClassSchedulesByClassroomAndTimeStmt *sql.Stmt
	getClassSchedulesByCourseIDStmt         *sql.Stmt
	getClassroomByIDStmt                    *sql.Stmt
	getClassroomByNameStmt                  *sql.Stmt
	getClassroomsByBuildingStmt             *sql.Stmt
	getClassroomsByCapacityStmt             *sql.Stmt
	getCourseByIDStmt                       *sql.Stmt
	getCourseSectionByIDStmt                *sql.Stmt
	getCourseSectionsByCourseIDStmt         *sql.Stmt
	getCourseSectionsByTeacherIDStmt        *sql.Stmt
	getCoursesByFacultyIDStmt               *sql.Stmt
	getFacultiesByUniversityIDStmt          *sql.Stmt
	getFacultyByIDStmt                      *sql.Stmt
	getFacultyByNameStmt                    *sql.Stmt
	getNearbyClassroomsStmt                 *sql.Stmt
	getQRCodeByCodeStmt                     *sql.Stmt
	getQRCodesByCourseIDStmt                *sql.Stmt
	getRefreshTokenStmt                     *sql.Stmt
	getUniversityByIDStmt                   *sql.Stmt
	getUniversityByNameStmt                 *sql.Stmt
	getUserByEmailStmt                      *sql.Stmt
	getUserByIDStmt                         *sql.Stmt
	listFacultiesStmt                       *sql.Stmt
	listUniversitiesStmt                    *sql.Stmt
	listUsersStmt                           *sql.Stmt
	updateAttendanceStmt                    *sql.Stmt
	updateClassScheduleStmt                 *sql.Stmt
	updateClassroomStmt                     *sql.Stmt
	updateCourseStmt                        *sql.Stmt
	updateCourseSectionStmt                 *sql.Stmt
	updateFacultyStmt                       *sql.Stmt
	updateUniversityStmt                    *sql.Stmt
	updateUserStmt                          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		cleanExpiredTokensStmt:                  q.cleanExpiredTokensStmt,
		createAttendanceStmt:                    q.createAttendanceStmt,
		createClassScheduleStmt:                 q.createClassScheduleStmt,
		createClassroomStmt:                     q.createClassroomStmt,
		createCourseStmt:                        q.createCourseStmt,
		createCourseSectionStmt:                 q.createCourseSectionStmt,
		createFacultyStmt:                       q.createFacultyStmt,
		createQRCodeStmt:                        q.createQRCodeStmt,
		createRefreshTokenStmt:                  q.createRefreshTokenStmt,
		createUniversityStmt:                    q.createUniversityStmt,
		createUserStmt:                          q.createUserStmt,
		deleteClassScheduleStmt:                 q.deleteClassScheduleStmt,
		deleteClassroomStmt:                     q.deleteClassroomStmt,
		deleteCourseStmt:                        q.deleteCourseStmt,
		deleteCourseSectionStmt:                 q.deleteCourseSectionStmt,
		deleteFacultyStmt:                       q.deleteFacultyStmt,
		deleteQRCodeStmt:                        q.deleteQRCodeStmt,
		deleteRefreshTokenStmt:                  q.deleteRefreshTokenStmt,
		deleteUniversityStmt:                    q.deleteUniversityStmt,
		deleteUserStmt:                          q.deleteUserStmt,
		deleteUserRefreshTokensStmt:             q.deleteUserRefreshTokensStmt,
		getAllStmt:                              q.getAllStmt,
		getAttendanceByClassScheduleIDStmt:      q.getAttendanceByClassScheduleIDStmt,
		getAttendanceByIDStmt:                   q.getAttendanceByIDStmt,
		getAttendanceByStudentIDStmt:            q.getAttendanceByStudentIDStmt,
		getClassScheduleByIDStmt:                q.getClassScheduleByIDStmt,
		getClassSchedulesByClassroomAndTimeStmt: q.getClassSchedulesByClassroomAndTimeStmt,
		getClassSchedulesByCourseIDStmt:         q.getClassSchedulesByCourseIDStmt,
		getClassroomByIDStmt:                    q.getClassroomByIDStmt,
		getClassroomByNameStmt:                  q.getClassroomByNameStmt,
		getClassroomsByBuildingStmt:             q.getClassroomsByBuildingStmt,
		getClassroomsByCapacityStmt:             q.getClassroomsByCapacityStmt,
		getCourseByIDStmt:                       q.getCourseByIDStmt,
		getCourseSectionByIDStmt:                q.getCourseSectionByIDStmt,
		getCourseSectionsByCourseIDStmt:         q.getCourseSectionsByCourseIDStmt,
		getCourseSectionsByTeacherIDStmt:        q.getCourseSectionsByTeacherIDStmt,
		getCoursesByFacultyIDStmt:               q.getCoursesByFacultyIDStmt,
		getFacultiesByUniversityIDStmt:          q.getFacultiesByUniversityIDStmt,
		getFacultyByIDStmt:                      q.getFacultyByIDStmt,
		getFacultyByNameStmt:                    q.getFacultyByNameStmt,
		getNearbyClassroomsStmt:                 q.getNearbyClassroomsStmt,
		getQRCodeByCodeStmt:                     q.getQRCodeByCodeStmt,
		getQRCodesByCourseIDStmt:                q.getQRCodesByCourseIDStmt,
		getRefreshTokenStmt:                     q.getRefreshTokenStmt,
		getUniversityByIDStmt:                   q.getUniversityByIDStmt,
		getUniversityByNameStmt:                 q.getUniversityByNameStmt,
		getUserByEmailStmt:                      q.getUserByEmailStmt,
		getUserByIDStmt:                         q.getUserByIDStmt,
		listFacultiesStmt:                       q.listFacultiesStmt,
		listUniversitiesStmt:                    q.listUniversitiesStmt,
		listUsersStmt:                           q.listUsersStmt,
		updateAttendanceStmt:                    q.updateAttendanceStmt,
		updateClassScheduleStmt:                 q.updateClassScheduleStmt,
		updateClassroomStmt:                     q.updateClassroomStmt,
		updateCourseStmt:                        q.updateCourseStmt,
		updateCourseSectionStmt:                 q.updateCourseSectionStmt,
		updateFacultyStmt:                       q.updateFacultyStmt,
		updateUniversityStmt:                    q.updateUniversityStmt,
		updateUserStmt:                          q.updateUserStmt,
	}
}
