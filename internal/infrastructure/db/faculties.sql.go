// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: faculties.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFaculty = `-- name: CreateFaculty :one
INSERT INTO faculties (
    university_id,
    name,
    location_lat,
    location_lng
) VALUES (
    $1, $2, $3, $4
) RETURNING id, university_id, name, location_lat, location_lng, created_at, updated_at
`

type CreateFacultyParams struct {
	UniversityID uuid.UUID `json:"university_id"`
	Name         string    `json:"name"`
	LocationLat  string    `json:"location_lat"`
	LocationLng  string    `json:"location_lng"`
}

func (q *Queries) CreateFaculty(ctx context.Context, arg CreateFacultyParams) (Faculty, error) {
	row := q.queryRow(ctx, q.createFacultyStmt, createFaculty,
		arg.UniversityID,
		arg.Name,
		arg.LocationLat,
		arg.LocationLng,
	)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Name,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFaculty = `-- name: DeleteFaculty :exec
DELETE FROM faculties
WHERE id = $1
`

func (q *Queries) DeleteFaculty(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteFacultyStmt, deleteFaculty, id)
	return err
}

const getFacultiesByUniversityID = `-- name: GetFacultiesByUniversityID :many
SELECT id, university_id, name, location_lat, location_lng, created_at, updated_at FROM faculties
WHERE university_id = $1
ORDER BY name
`

func (q *Queries) GetFacultiesByUniversityID(ctx context.Context, universityID uuid.UUID) ([]Faculty, error) {
	rows, err := q.query(ctx, q.getFacultiesByUniversityIDStmt, getFacultiesByUniversityID, universityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Faculty{}
	for rows.Next() {
		var i Faculty
		if err := rows.Scan(
			&i.ID,
			&i.UniversityID,
			&i.Name,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacultyByID = `-- name: GetFacultyByID :one
SELECT id, university_id, name, location_lat, location_lng, created_at, updated_at FROM faculties
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFacultyByID(ctx context.Context, id uuid.UUID) (Faculty, error) {
	row := q.queryRow(ctx, q.getFacultyByIDStmt, getFacultyByID, id)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Name,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFacultyByName = `-- name: GetFacultyByName :one
SELECT id, university_id, name, location_lat, location_lng, created_at, updated_at FROM faculties
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetFacultyByName(ctx context.Context, name string) (Faculty, error) {
	row := q.queryRow(ctx, q.getFacultyByNameStmt, getFacultyByName, name)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Name,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFaculties = `-- name: ListFaculties :many
SELECT id, university_id, name, location_lat, location_lng, created_at, updated_at FROM faculties
ORDER BY name
`

func (q *Queries) ListFaculties(ctx context.Context) ([]Faculty, error) {
	rows, err := q.query(ctx, q.listFacultiesStmt, listFaculties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Faculty{}
	for rows.Next() {
		var i Faculty
		if err := rows.Scan(
			&i.ID,
			&i.UniversityID,
			&i.Name,
			&i.LocationLat,
			&i.LocationLng,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFaculty = `-- name: UpdateFaculty :one
UPDATE faculties
SET
    university_id = COALESCE($2, university_id),
    name = COALESCE($3, name),
    location_lat = COALESCE($4, location_lat),
    location_lng = COALESCE($5, location_lng),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, university_id, name, location_lat, location_lng, created_at, updated_at
`

type UpdateFacultyParams struct {
	ID           uuid.UUID `json:"id"`
	UniversityID uuid.UUID `json:"university_id"`
	Name         string    `json:"name"`
	LocationLat  string    `json:"location_lat"`
	LocationLng  string    `json:"location_lng"`
}

func (q *Queries) UpdateFaculty(ctx context.Context, arg UpdateFacultyParams) (Faculty, error) {
	row := q.queryRow(ctx, q.updateFacultyStmt, updateFaculty,
		arg.ID,
		arg.UniversityID,
		arg.Name,
		arg.LocationLat,
		arg.LocationLng,
	)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UniversityID,
		&i.Name,
		&i.LocationLat,
		&i.LocationLng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
