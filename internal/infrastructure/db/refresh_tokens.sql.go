// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cleanExpiredTokens = `-- name: CleanExpiredTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at <= NOW()
`

func (q *Queries) CleanExpiredTokens(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanExpiredTokensStmt, cleanExpiredTokens)
	return err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.queryRow(ctx, q.createRefreshTokenStmt, createRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteRefreshTokenStmt, deleteRefreshToken, token)
	return err
}

const deleteUserRefreshTokens = `-- name: DeleteUserRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserRefreshTokensStmt, deleteUserRefreshTokens, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT user_id FROM refresh_tokens
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getRefreshTokenStmt, getRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
