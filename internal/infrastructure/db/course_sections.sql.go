// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_sections.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCourseSection = `-- name: CreateCourseSection :one
INSERT INTO course_sections (
    course_id,
    name,
    teacher_id,
    max_students
) VALUES (
    $1, $2, $3, $4
) RETURNING id, course_id, teacher_id, max_students, created_at, updated_at, name
`

type CreateCourseSectionParams struct {
	CourseID    uuid.UUID `json:"course_id"`
	Name        string    `json:"name"`
	TeacherID   uuid.UUID `json:"teacher_id"`
	MaxStudents int32     `json:"max_students"`
}

func (q *Queries) CreateCourseSection(ctx context.Context, arg CreateCourseSectionParams) (CourseSection, error) {
	row := q.queryRow(ctx, q.createCourseSectionStmt, createCourseSection,
		arg.CourseID,
		arg.Name,
		arg.TeacherID,
		arg.MaxStudents,
	)
	var i CourseSection
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.TeacherID,
		&i.MaxStudents,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteCourseSection = `-- name: DeleteCourseSection :exec
DELETE FROM course_sections
WHERE id = $1
`

func (q *Queries) DeleteCourseSection(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCourseSectionStmt, deleteCourseSection, id)
	return err
}

const getCourseSectionByID = `-- name: GetCourseSectionByID :one
SELECT id, course_id, teacher_id, max_students, created_at, updated_at, name FROM course_sections
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourseSectionByID(ctx context.Context, id uuid.UUID) (CourseSection, error) {
	row := q.queryRow(ctx, q.getCourseSectionByIDStmt, getCourseSectionByID, id)
	var i CourseSection
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.TeacherID,
		&i.MaxStudents,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getCourseSectionsByCourseID = `-- name: GetCourseSectionsByCourseID :many
SELECT id, course_id, teacher_id, max_students, created_at, updated_at, name FROM course_sections
WHERE course_id = $1
`

func (q *Queries) GetCourseSectionsByCourseID(ctx context.Context, courseID uuid.UUID) ([]CourseSection, error) {
	rows, err := q.query(ctx, q.getCourseSectionsByCourseIDStmt, getCourseSectionsByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CourseSection{}
	for rows.Next() {
		var i CourseSection
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.TeacherID,
			&i.MaxStudents,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseSectionsByTeacherID = `-- name: GetCourseSectionsByTeacherID :many
SELECT id, course_id, teacher_id, max_students, created_at, updated_at, name FROM course_sections
WHERE teacher_id = $1
`

func (q *Queries) GetCourseSectionsByTeacherID(ctx context.Context, teacherID uuid.UUID) ([]CourseSection, error) {
	rows, err := q.query(ctx, q.getCourseSectionsByTeacherIDStmt, getCourseSectionsByTeacherID, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CourseSection{}
	for rows.Next() {
		var i CourseSection
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.TeacherID,
			&i.MaxStudents,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseSection = `-- name: UpdateCourseSection :one
UPDATE course_sections
SET
    name = COALESCE($2, name),
    teacher_id = COALESCE($3, teacher_id),
    max_students = COALESCE($4, max_students),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, course_id, teacher_id, max_students, created_at, updated_at, name
`

type UpdateCourseSectionParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	TeacherID   uuid.UUID `json:"teacher_id"`
	MaxStudents int32     `json:"max_students"`
}

func (q *Queries) UpdateCourseSection(ctx context.Context, arg UpdateCourseSectionParams) (CourseSection, error) {
	row := q.queryRow(ctx, q.updateCourseSectionStmt, updateCourseSection,
		arg.ID,
		arg.Name,
		arg.TeacherID,
		arg.MaxStudents,
	)
	var i CourseSection
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.TeacherID,
		&i.MaxStudents,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
