// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: schedules.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
    course_id,
    section_id,
    classroom_id,
    day_of_week,
    start_time,
    end_time
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at
`

type CreateScheduleParams struct {
	CourseID    uuid.UUID `json:"course_id"`
	SectionID   uuid.UUID `json:"section_id"`
	ClassroomID uuid.UUID `json:"classroom_id"`
	DayOfWeek   int32     `json:"day_of_week"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.queryRow(ctx, q.createScheduleStmt, createSchedule,
		arg.CourseID,
		arg.SectionID,
		arg.ClassroomID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.SectionID,
		&i.ClassroomID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteScheduleStmt, deleteSchedule, id)
	return err
}

const getScheduleByID = `-- name: GetScheduleByID :one
SELECT id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at FROM schedules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetScheduleByID(ctx context.Context, id uuid.UUID) (Schedule, error) {
	row := q.queryRow(ctx, q.getScheduleByIDStmt, getScheduleByID, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.SectionID,
		&i.ClassroomID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSchedulesByClassroomAndTime = `-- name: GetSchedulesByClassroomAndTime :many
SELECT id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at FROM schedules
WHERE classroom_id = $1
AND day_of_week = $2
AND (
    (start_time <= $3 AND end_time > $3) OR
    (start_time < $4 AND end_time >= $4) OR
    (start_time >= $3 AND end_time <= $4)
)
`

type GetSchedulesByClassroomAndTimeParams struct {
	ClassroomID uuid.UUID `json:"classroom_id"`
	DayOfWeek   int32     `json:"day_of_week"`
	StartTime   time.Time `json:"start_time"`
	StartTime_2 time.Time `json:"start_time_2"`
}

func (q *Queries) GetSchedulesByClassroomAndTime(ctx context.Context, arg GetSchedulesByClassroomAndTimeParams) ([]Schedule, error) {
	rows, err := q.query(ctx, q.getSchedulesByClassroomAndTimeStmt, getSchedulesByClassroomAndTime,
		arg.ClassroomID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.StartTime_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.SectionID,
			&i.ClassroomID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedulesByClassroomID = `-- name: GetSchedulesByClassroomID :many
SELECT id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at FROM schedules
WHERE classroom_id = $1
`

func (q *Queries) GetSchedulesByClassroomID(ctx context.Context, classroomID uuid.UUID) ([]Schedule, error) {
	rows, err := q.query(ctx, q.getSchedulesByClassroomIDStmt, getSchedulesByClassroomID, classroomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.SectionID,
			&i.ClassroomID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedulesByCourseID = `-- name: GetSchedulesByCourseID :many
SELECT id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at FROM schedules
WHERE course_id = $1
`

func (q *Queries) GetSchedulesByCourseID(ctx context.Context, courseID uuid.UUID) ([]Schedule, error) {
	rows, err := q.query(ctx, q.getSchedulesByCourseIDStmt, getSchedulesByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.SectionID,
			&i.ClassroomID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedulesBySectionID = `-- name: GetSchedulesBySectionID :many
SELECT id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at FROM schedules
WHERE section_id = $1
`

func (q *Queries) GetSchedulesBySectionID(ctx context.Context, sectionID uuid.UUID) ([]Schedule, error) {
	rows, err := q.query(ctx, q.getSchedulesBySectionIDStmt, getSchedulesBySectionID, sectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.SectionID,
			&i.ClassroomID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedules
SET
    course_id = COALESCE($2, course_id),
    section_id = COALESCE($3, section_id),
    classroom_id = COALESCE($4, classroom_id),
    day_of_week = COALESCE($5, day_of_week),
    start_time = COALESCE($6, start_time),
    end_time = COALESCE($7, end_time),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, course_id, section_id, classroom_id, day_of_week, start_time, end_time, created_at, updated_at
`

type UpdateScheduleParams struct {
	ID          uuid.UUID `json:"id"`
	CourseID    uuid.UUID `json:"course_id"`
	SectionID   uuid.UUID `json:"section_id"`
	ClassroomID uuid.UUID `json:"classroom_id"`
	DayOfWeek   int32     `json:"day_of_week"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.queryRow(ctx, q.updateScheduleStmt, updateSchedule,
		arg.ID,
		arg.CourseID,
		arg.SectionID,
		arg.ClassroomID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.SectionID,
		&i.ClassroomID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
